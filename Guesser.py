
from flask import Flask, render_template, request, url_for, redirect
from deck_manager import *


app = Flask(__name__)


# Routing. Move to different module?
@app.route("/")
@app.route("/index/")
def index():
    """Starting page. Doesn't take any arguments (yet?)"""

    return render_template("index.html")


@app.route("/browse/")
def browse():
    """Displays a list of decks in the app.

    Context Args:
        deck_names (list): List of deck name strings.
    """
    return render_template(
        "select_deck.html", 
        select_mode = "browse",
        deck_names = list_decks(),
        )


@app.route("/browse/<deck_name>/")
def browse_deck(deck_name: str):
    """Displays a table of all entries in a selected deck.

    Takes only GET requests so far.

    Args:
        deck_name (str): Name of deck.
    
    Context Args:
        deck (dict): Dictionary containing deck data and information.
    """
    return render_template("browse/deck.html", 
                            deck_name=deck_name,
                            deck=load_database()[deck_name])


@app.route("/browse/<deck_name>/<card_id>/", methods=["GET", "POST"])
def edit_item(deck_name: str, card_id: str):
    """
    View a single entry in deck.
    ┌=========================┐
    |PLEASE REWRITE THIS LATER|
    └=========================┘
    Right now it's not a separate view but a sub-view tied to the browse_deck
    function.

    GET: Opens an editing interface for a card selected by ID.
    Loads language data and card data from deck.
    Currently it only lets you edit the key value pairs.

    POST: Updates a value.
    
    Args:
        deck_name (str): Name of deck.
        card_id (str): The id of a card.
    
    Context Args:
        languages (list): List of strings representing the data keys.
        card (dict): Card data to fill all the cells.
        deck_name (str): Name of deck.
    """

    if request.method == "GET":
        return render_template(
            "browse/item.html",
            deck_name=deck_name,
            languages=get_languages(deck_name),
            card=get_card(card_id, deck_name),
            )
    
    # maybe make it another function?
    if request.method == "POST":
        update_card(deck_name, request.form)
        return redirect(url_for("browse_deck", deck_name=deck_name))


@app.route("/add/<deck_name>/", methods=["POST", "GET"])
def add_item(deck_name: str):
    """ Brings up the interface to add a new item to the selected deck.

        Args:
            deck_name (str): deck name string.
        Context Args:
            languages (str): languages for headers.
    """

    if request.method == "GET":
        return render_template("browse/add_item.html", 
                                languages=get_languages(deck_name), 
                                deck_name=deck_name)
    if request.method == "POST":
        add_card(deck_name, request.form)
        return redirect(url_for("browse_deck", deck_name=deck_name))


@app.route("/train/")
def train():
    """Lists user decks available for training.

    Args:
        deck_names (list): List with string names of all available decks.
    """
    due_dict = {}
    for deck_name in list_decks():
        due_dict[deck_name] = count_due(deck_name)
    return render_template(
        "select_deck.html", 
        select_mode = "train",
        deck_names = list_decks(),
        due_numbers = due_dict,
        )


@app.route("/train/<deck_name>/")
def deck_lang_select(deck_name: str):
    """Language selection interface.

    Asks user to choose which language is represented on front cards.

    Args:
    deck_name (str): Name of the deck.

    Context Args: 
    languages (list): List of language names for the fields.  
    """

    return render_template(
        "train/choose_front.html", 
        deck_name=deck_name, 
        languages=get_languages(deck_name),
        )


@app.route("/train/<deck_name>/<front>", methods=["GET", "POST"])
def train_deck(deck_name: str, front: str):
    """Actual training interface. 
    
    Course of actions:
        1. Get the due cards. If no due cards are up: redirects to new card
        adding interface.
        2. Pick one card from the due deck and generate the training page.
        ^ subject to change.
        3. The training page shows you the front card, you need to
        remember the end card. That's about it.
        Then it shows you the right answer, and based on your response
        (button pressed), resets the card's timer values or increments it.

    Possible modifications: multiple choice buttons. 
    Or entry field, though I'm not sure.

    Args:
        deck_name (str): deck name string.
        front (str): front card language.
    Context Args:
        Maybe rewrite that?
    card: card object with front and back attributes, generated by fn.
    """    
    if request.method == "GET":
        due_deck = get_due(deck_name, front)
        if due_deck["cards"] == []:
            return redirect(url_for(
                "new_cards", 
                deck_name=deck_name, 
                front=front))
        else:
            card = pick_card(due_deck, front=front)
            return render_template(
                "train/train.html",
                card=card,
                deck_name=deck_name,
                front=front,
                )
    if request.method == "POST":
        update_date(deck_name=deck_name, 
                    card_id=request.form["card_id"],
                    front=front,
                    method=request.form["action"])
        return redirect(url_for(
            "train_deck", 
            deck_name=deck_name, 
            front=front
            ))


@app.route("/new/<deck_name>/<front>", methods=["POST", "GET"])
def new_cards(deck_name: str, front: str):
    """An interface for adding new due cards to the deck.
    
    Subject for rewriting. 

    Args:
        deck_name (str): Deck name.
        front (str): Front language.

    Context args:
        result (str): Either "Done" or "Empty".
    """
    # rewrite this too?
    if request.method == "GET":
        return render_template(
            "new/cards.html", 
            deck_name=deck_name, 
            front=front
            )
    if request.method == "POST":
        if request.form["new card"] == "yes":
            # add a number of new cards parameter
            result = create_due(deck_name, front, 5)
            # do the logic with jinja
            if result == "Done":
                return render_template(
                    "new/added_card.html", 
                    deck_name=deck_name, 
                    front=front)
            elif result == "Empty":
                return render_template("new/oops.html")


# Start frontend
if __name__ == "__main__":
    app.run(debug=True)
