import json
from flask import Flask, render_template, request
from flask_wtf import Form
from cards import *
from deck_manager import *

app = Flask(__name__)


# Routing. Move to different module?
@app.route("/")
@app.route("/index/")
def index():
    """Starting page. Doesn't take any arguments (yet?)"""

    return render_template("index.html")


@app.route("/browse/")
def browse():
    """Displays a list of decks in the app.
    decks = list of deck name strings."""

    decks = list_decks(database)
    return render_template("deck_select.html", decks=decks)


@app.route("/browse/<deckname>/")
def browse_deck(deckname):
    """Displays a table of all entries in a select deck.
    deck = a list of dictionaries. Used for building table.
    fields = a list of column names.
    deckname = a string with the name of deck."""

    deck = load_deck(database, deckname)
    fields = get_fields(deck)
    return render_template("browse.html",
                           deckname=deckname,
                           deck=deck,
                           fields=fields)


@app.route("/edit/<deckname>/<card_id>/", methods=["POST", "GET"])
def edit_item(deckname, card_id):
    """GET: Opens an editing interface for a card selected by ID.
    Currently only lets you edit the key value pairs.
    POST: Finds card selected by ID in the database,
    replaces the key values entered by user via the form.
    deckname: string containing deck's name.
    card_id: id key value.
    card: dictionary object representing the card.
    fields: list of strings representing the key values"""

    if request.method == "GET":
        fields = get_fields(deckname)
        card = find_item(card_id, deckname)
        return render_template("edit.html", card=card, fields=fields)
    if request.method == "POST":
        update_item(deckname, request.form["id"], request.form)
        return "done"


@app.route("/train/<deck>/front_select/")
def deck_lang_select(deck):
    """Lets user choose the front-card and the end-card of the language pair.
    deck: string with the deck name.
    langs: list object containing sorted language pair."""

    langs = list_langs(get_fields(database[deck]))
    return render_template("train_select_lang.html", deck=deck, langs=langs)


@app.route("/train/")
@app.route("/train/select/")
def train():
    """Lists user decks available for training. 
    decks: list object containing string names of available decks.
    """
    decks = list_decks(database)
    return render_template("train_select_deck.html", decks=decks)


@app.route("/train/<deck>/<front>")
def train_deck(deck, front):
    """Actual training interface. It shows you the front card, you need to
    remember the end card. That's about it.
    Possible modifications: Okay/Again button like in anki or
    multiple choice buttons. Or entry field, though I'm not sure.
    deck: string object representing deck name
    front: string object indicating which value pair is front card.
    card: card object with front and back attributes, generated by fn.
    """    
    card = pick_card(database[deck], front=front)
    return render_template("train.html",
                           front=card.front,
                           back=card.back,
                           deck=deck,
                           lang=front)


database = load_database("data_s.json")

# Start frontend
if __name__ == "__main__":
    app.run(debug=True)
